---

- hosts: all
  become: true
  vars_files:
    - vars.yml


  tasks:

  - name: Get the platform (i386 or amd64) of the virtual machine
    command: dpkg --print-architecture
    register: print_architecture

  - name: And set the actual platform value as a variable
    set_fact:
      platform: "{{ print_architecture.stdout }}"


  - name: Get rid of Chef and Puppet to save some resources and autoremove unused packages to save some disk space
    apt: name={{ item }} state=absent autoremove=yes
    with_items:
      - chef
      - puppet

  - name: Install unzip for unpacking files later on
    apt: name=unzip state=latest

  - name: Install Vim, because plain Vi is driving me crazy
    apt: name=vim state=latest

  - name: Install cURL, which is missing on the Bento image
    apt: name=curl state=latest

  - name: Install NTP to avoid time drift inside the VM
    apt: name={{ item }} state=latest
    with_items:
      - ntp
      - ntpdate

  - name: Install the JRE
    apt: name=openjdk-8-jre-headless state=latest update_cache=yes install_recommends=no

  - name: Install pip to get current Python dependencies
    apt: name=python-pip state=latest

  - name: Install Docker
    apt: name=docker.io state=latest
    when: "platform == 'amd64'"

  - name: Make sure Docker autostarts and is started
    service: name=docker enabled=yes state=started
    when: "platform == 'amd64'"

  - name: Install Docker for Python to handle Docker from Ansible
    pip: name=docker state=latest
    when: "platform == 'amd64'"


  - name: Get a Redis container on 64bit
    docker_container:
      name: myredis
      image: redis
      command: redis-server --appendonly yes
      state: started
      restart_policy: always
      published_ports:
        - 0.0.0.0:6379:6379
      volumes:
        - /data
      log_driver: json-file
    when: "platform == 'amd64'"

  - name: Install Redis as a service on 32bit
    apt: name=redis-server state=latest
    when: "platform == 'i386'"

  - name: Make sure Redis autostarts and is started on 32bit
    service: name=redis-server enabled=yes state=started
    when: "platform == 'i386'"


  - name: Install Redis CLI, nginx, and MongoDB so we have services in action
    apt: name={{ item }} state=latest
    with_items:
      - redis-tools
      - nginx
      - mongodb

  - name: Change the nginx configuration to expose /server-status, which Metricbeat nginx uses
    template: src=templates/nginx/nginx-sites dest=/etc/nginx/sites-enabled/default

  - name: Enable the default HTML site of nginx
    command: cp /var/www/html/index.nginx-debian.html /var/www/html/index.html

  - name: Make sure nginx and MongoDB autostart and are started
    service: name={{ item }} enabled=yes state=started
    with_items:
      - nginx
      - mongodb

  - name: Reload the nginx configuration so that our change is applied
    service: name=nginx state=reloaded


  - name: Get Elasticsearch
    get_url:
      url={{ elastic_download }}/downloads/elasticsearch/elasticsearch-{{ elastic_version }}.deb
      dest=/opt/elasticsearch.deb

  - name: Install Elasticsearch
    apt: deb=/opt/elasticsearch.deb

  - name: Make sure Elasticsearch autostarts, but is stopped until it is properly configured
    service: name=elasticsearch enabled=yes state=stopped


  - name: Get Logstash
    get_url:
      url={{ elastic_download }}/downloads/logstash/logstash-{{ elastic_version }}.deb
      dest=/opt/logstash.deb

  - name: Install Logstash
    apt: deb=/opt/logstash.deb

  - name: Make sure Logstash autostarts, but is stopped until it is properly configured
    service: name=logstash enabled=yes state=stopped


  - name: Get the Beats
    get_url:
      url={{ elastic_download }}/downloads/beats/{{ item }}/{{ item }}-{{ elastic_version }}-{{ platform }}.deb
      dest=/opt/{{ item }}.deb
    with_items:
      - auditbeat
      - filebeat
      - heartbeat
      - metricbeat
      - packetbeat

  - name: Install the Beats
    apt: deb=/opt/{{ item }}.deb
    with_items:
      - auditbeat
      - filebeat
      - heartbeat
      - metricbeat
      - packetbeat

  - name: Make sure the Beats autostart, but are stopped until they are properly configured
    service: name={{ item }} enabled=yes state=stopped
    with_items:
      - auditbeat
      - filebeat
      - heartbeat-elastic
      - metricbeat
      - packetbeat


  - name: Get Kibana
    get_url:
      url={{ elastic_download }}/downloads/kibana/kibana-{{ elastic_version }}-{{ platform }}.deb
      dest=/opt/kibana.deb

  - name: Install Kibana
    apt: deb=/opt/kibana.deb

  - name: Make sure Kibana autostarts, but is stopped until it is properly configured
    service: name=kibana enabled=yes state=stopped


  - name: Download the ingest-geoip plugin
    get_url:
      url={{ elastic_download }}/downloads/elasticsearch-plugins/ingest-geoip/ingest-geoip-{{ elastic_version }}.zip
      dest=/opt/ingest-geoip.zip

  - name: Download the ingest-user-agent plugin
    get_url:
      url={{ elastic_download }}/downloads/elasticsearch-plugins/ingest-user-agent/ingest-user-agent-{{ elastic_version }}.zip
      dest=/opt/ingest-user-agent.zip


  - name: Make the shell scripts executable
    file: path=/elastic-stack/{{ item }} mode=0755
    with_items:
      - all.sh
      - fix-time.sh


  - name: Get the injector plugin to generate test data
    get_url:
      url=https://download.elastic.co/workshops/basic-kibana/injector/injector-6.2.jar
      dest=/opt/injector.jar
      mode=0755
